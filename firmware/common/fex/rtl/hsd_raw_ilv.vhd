-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.3
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity hsd_raw_ilv is
generic (
    C_S_AXI_BUS_A_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_BUS_A_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    sync : IN STD_LOGIC;
    x0_V : IN STD_LOGIC_VECTOR (43 downto 0);
    x1_V : IN STD_LOGIC_VECTOR (43 downto 0);
    x2_V : IN STD_LOGIC_VECTOR (43 downto 0);
    x3_V : IN STD_LOGIC_VECTOR (43 downto 0);
    x4_V : IN STD_LOGIC_VECTOR (43 downto 0);
    x5_V : IN STD_LOGIC_VECTOR (43 downto 0);
    x6_V : IN STD_LOGIC_VECTOR (43 downto 0);
    x7_V : IN STD_LOGIC_VECTOR (43 downto 0);
    ti0_V : IN STD_LOGIC_VECTOR (1 downto 0);
    ti1_V : IN STD_LOGIC_VECTOR (1 downto 0);
    ti2_V : IN STD_LOGIC_VECTOR (1 downto 0);
    ti3_V : IN STD_LOGIC_VECTOR (1 downto 0);
    ti4_V : IN STD_LOGIC_VECTOR (1 downto 0);
    ti5_V : IN STD_LOGIC_VECTOR (1 downto 0);
    ti6_V : IN STD_LOGIC_VECTOR (1 downto 0);
    ti7_V : IN STD_LOGIC_VECTOR (1 downto 0);
    y0_V : OUT STD_LOGIC_VECTOR (63 downto 0);
    y1_V : OUT STD_LOGIC_VECTOR (63 downto 0);
    y2_V : OUT STD_LOGIC_VECTOR (63 downto 0);
    y3_V : OUT STD_LOGIC_VECTOR (63 downto 0);
    y4_V : OUT STD_LOGIC_VECTOR (63 downto 0);
    y5_V : OUT STD_LOGIC_VECTOR (63 downto 0);
    y6_V : OUT STD_LOGIC_VECTOR (63 downto 0);
    y7_V : OUT STD_LOGIC_VECTOR (63 downto 0);
    y8_V : OUT STD_LOGIC_VECTOR (63 downto 0);
    to0_V : OUT STD_LOGIC_VECTOR (1 downto 0);
    to1_V : OUT STD_LOGIC_VECTOR (1 downto 0);
    to2_V : OUT STD_LOGIC_VECTOR (1 downto 0);
    to3_V : OUT STD_LOGIC_VECTOR (1 downto 0);
    to4_V : OUT STD_LOGIC_VECTOR (1 downto 0);
    to5_V : OUT STD_LOGIC_VECTOR (1 downto 0);
    to6_V : OUT STD_LOGIC_VECTOR (1 downto 0);
    to7_V : OUT STD_LOGIC_VECTOR (1 downto 0);
    to8_V : OUT STD_LOGIC_VECTOR (1 downto 0);
    yv_V : OUT STD_LOGIC_VECTOR (3 downto 0);
    s_axi_BUS_A_AWVALID : IN STD_LOGIC;
    s_axi_BUS_A_AWREADY : OUT STD_LOGIC;
    s_axi_BUS_A_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_BUS_A_ADDR_WIDTH-1 downto 0);
    s_axi_BUS_A_WVALID : IN STD_LOGIC;
    s_axi_BUS_A_WREADY : OUT STD_LOGIC;
    s_axi_BUS_A_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_BUS_A_DATA_WIDTH-1 downto 0);
    s_axi_BUS_A_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_BUS_A_DATA_WIDTH/8-1 downto 0);
    s_axi_BUS_A_ARVALID : IN STD_LOGIC;
    s_axi_BUS_A_ARREADY : OUT STD_LOGIC;
    s_axi_BUS_A_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_BUS_A_ADDR_WIDTH-1 downto 0);
    s_axi_BUS_A_RVALID : OUT STD_LOGIC;
    s_axi_BUS_A_RREADY : IN STD_LOGIC;
    s_axi_BUS_A_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_BUS_A_DATA_WIDTH-1 downto 0);
    s_axi_BUS_A_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_BUS_A_BVALID : OUT STD_LOGIC;
    s_axi_BUS_A_BREADY : IN STD_LOGIC;
    s_axi_BUS_A_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of hsd_raw_ilv is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "hsd_raw_ilv,hls_ip_2017_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcku085-flvb1760-2-e,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=4.987000,HLS_SYN_LAT=0,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=166,HLS_SYN_LUT=1133}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv15_7FFF : STD_LOGIC_VECTOR (14 downto 0) := "111111111111111";
    constant ap_const_lv16_7FFF : STD_LOGIC_VECTOR (15 downto 0) := "0111111111111111";
    constant ap_const_lv64_8000800080008000 : STD_LOGIC_VECTOR (63 downto 0) := "1000000000000000100000000000000010000000000000001000000000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal config_a : STD_LOGIC_VECTOR (31 downto 0);
    signal count : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal count_last : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal nopen : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal lskipped : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_phi_mux_storemerge_phi_fu_450_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal sync_read_read_fu_222_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lskipped_load_load_fu_748_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_868_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_nopen_flag_2_phi_fu_461_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_54_fu_1414_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_nopen_new_2_phi_fu_471_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal nopen_new_1_fu_1421_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_55_fu_1430_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_718_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_cast_fu_862_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_fu_1374_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_2_fu_896_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal v_assign_fu_1141_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_7_fu_923_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_fu_1170_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_15_fu_950_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_1_fu_1197_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_10_fu_977_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_3_fu_1224_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_11_fu_1004_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_4_fu_1251_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_12_fu_1031_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_5_fu_1278_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_13_fu_1058_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_6_fu_1305_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_14_fu_1085_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_8_fu_1332_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_9_fu_1359_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_756_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_752_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_770_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_766_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp8_fu_774_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp7_fu_760_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_8_fu_802_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_798_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_816_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_812_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp2_fu_820_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp1_fu_806_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_5_fu_786_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_780_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_832_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_826_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp9_fu_838_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp6_fu_792_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_15_fu_850_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_fu_844_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_498_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_488_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_478_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Val2_23_fu_874_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_46_fu_878_p8 : STD_LOGIC_VECTOR (58 downto 0);
    signal grp_fu_528_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_518_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_508_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Val2_24_fu_901_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_49_fu_905_p8 : STD_LOGIC_VECTOR (58 downto 0);
    signal grp_fu_558_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_548_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_538_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Val2_25_fu_928_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_56_fu_932_p8 : STD_LOGIC_VECTOR (58 downto 0);
    signal grp_fu_588_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_578_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_568_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Val2_26_fu_955_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_59_fu_959_p8 : STD_LOGIC_VECTOR (58 downto 0);
    signal grp_fu_618_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_608_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_598_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Val2_27_fu_982_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_62_fu_986_p8 : STD_LOGIC_VECTOR (58 downto 0);
    signal grp_fu_648_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_638_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_628_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Val2_28_fu_1009_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_65_fu_1013_p8 : STD_LOGIC_VECTOR (58 downto 0);
    signal grp_fu_678_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_668_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_658_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Val2_29_fu_1036_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_68_fu_1040_p8 : STD_LOGIC_VECTOR (58 downto 0);
    signal grp_fu_708_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_698_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_688_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Val2_30_fu_1063_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_71_fu_1067_p8 : STD_LOGIC_VECTOR (58 downto 0);
    signal dcount_fu_1097_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_1103_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_17_fu_1107_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_18_fu_1117_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_9_cast_fu_1111_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp3_fu_1123_p8 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_15_fu_1148_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_21_fu_1152_p8 : STD_LOGIC_VECTOR (58 downto 0);
    signal p_Val2_16_fu_1175_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_24_fu_1179_p8 : STD_LOGIC_VECTOR (58 downto 0);
    signal p_Val2_17_fu_1202_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_27_fu_1206_p8 : STD_LOGIC_VECTOR (58 downto 0);
    signal p_Val2_18_fu_1229_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_30_fu_1233_p8 : STD_LOGIC_VECTOR (58 downto 0);
    signal p_Val2_19_fu_1256_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_33_fu_1260_p8 : STD_LOGIC_VECTOR (58 downto 0);
    signal p_Val2_20_fu_1283_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_36_fu_1287_p8 : STD_LOGIC_VECTOR (58 downto 0);
    signal p_Val2_21_fu_1310_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_39_fu_1314_p8 : STD_LOGIC_VECTOR (58 downto 0);
    signal p_Val2_22_fu_1337_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_42_fu_1341_p8 : STD_LOGIC_VECTOR (58 downto 0);
    signal tmp_88_fu_1364_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_6_fu_856_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_52_fu_1394_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_54_nopen_load_fu_1400_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_89_fu_1386_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_53_fu_1408_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_141 : BOOLEAN;

    component hsd_raw_ilv_BUS_A_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        config_a : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    hsd_raw_ilv_BUS_A_s_axi_U : component hsd_raw_ilv_BUS_A_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_BUS_A_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_BUS_A_DATA_WIDTH)
    port map (
        AWVALID => s_axi_BUS_A_AWVALID,
        AWREADY => s_axi_BUS_A_AWREADY,
        AWADDR => s_axi_BUS_A_AWADDR,
        WVALID => s_axi_BUS_A_WVALID,
        WREADY => s_axi_BUS_A_WREADY,
        WDATA => s_axi_BUS_A_WDATA,
        WSTRB => s_axi_BUS_A_WSTRB,
        ARVALID => s_axi_BUS_A_ARVALID,
        ARREADY => s_axi_BUS_A_ARREADY,
        ARADDR => s_axi_BUS_A_ARADDR,
        RVALID => s_axi_BUS_A_RVALID,
        RREADY => s_axi_BUS_A_RREADY,
        RDATA => s_axi_BUS_A_RDATA,
        RRESP => s_axi_BUS_A_RRESP,
        BVALID => s_axi_BUS_A_BVALID,
        BREADY => s_axi_BUS_A_BREADY,
        BRESP => s_axi_BUS_A_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        config_a => config_a);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                if ((ap_const_lv1_1 = sync_read_read_fu_222_p2)) then 
                    count <= ap_const_lv32_0;
                elsif ((ap_const_lv1_0 = sync_read_read_fu_222_p2)) then 
                    count <= tmp_55_fu_1430_p2;
                end if;
            end if; 
        end if;
    end process;

    count_last_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = sync_read_read_fu_222_p2) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                count_last <= ap_const_lv32_0;
            elsif (((ap_const_lv1_1 = lskipped_load_load_fu_748_p1) and (ap_const_lv1_1 = icmp_fu_1374_p2) and (ap_const_lv1_0 = sync_read_read_fu_222_p2) and (ap_const_lv1_0 = tmp_6_cast_fu_862_p2) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                count_last <= count;
            elsif ((((ap_const_lv1_1 = lskipped_load_load_fu_748_p1) and (ap_const_lv1_1 = tmp_6_cast_fu_862_p2) and (ap_const_lv1_0 = sync_read_read_fu_222_p2) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_lv1_0 = lskipped_load_load_fu_748_p1) and (ap_const_lv1_0 = sync_read_read_fu_222_p2) and (ap_const_lv1_0 = tmp_12_fu_868_p2) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                count_last <= grp_fu_718_p2;
            end if; 
        end if;
    end process;

    lskipped_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_1 = lskipped_load_load_fu_748_p1) and (ap_const_lv1_1 = tmp_6_cast_fu_862_p2) and (ap_const_lv1_0 = sync_read_read_fu_222_p2) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_lv1_1 = sync_read_read_fu_222_p2) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                lskipped <= ap_const_lv1_0;
            elsif (((ap_const_lv1_0 = lskipped_load_load_fu_748_p1) and (ap_const_lv1_0 = sync_read_read_fu_222_p2) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                lskipped <= ap_phi_mux_storemerge_phi_fu_450_p4;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_phi_mux_nopen_flag_2_phi_fu_461_p4) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                nopen <= ap_phi_mux_nopen_new_2_phi_fu_471_p4;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_condition_141_assign_proc : process(ap_CS_fsm_state1, sync_read_read_fu_222_p2, lskipped_load_load_fu_748_p1)
    begin
                ap_condition_141 <= ((ap_const_lv1_0 = lskipped_load_load_fu_748_p1) and (ap_const_lv1_0 = sync_read_read_fu_222_p2) and (ap_const_logic_1 = ap_CS_fsm_state1));
    end process;


    ap_phi_mux_nopen_flag_2_phi_fu_461_p4_assign_proc : process(ap_CS_fsm_state1, sync_read_read_fu_222_p2, tmp_54_fu_1414_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
            if ((ap_const_lv1_0 = sync_read_read_fu_222_p2)) then 
                ap_phi_mux_nopen_flag_2_phi_fu_461_p4 <= tmp_54_fu_1414_p2;
            elsif ((ap_const_lv1_1 = sync_read_read_fu_222_p2)) then 
                ap_phi_mux_nopen_flag_2_phi_fu_461_p4 <= ap_const_lv1_1;
            else 
                ap_phi_mux_nopen_flag_2_phi_fu_461_p4 <= "X";
            end if;
        else 
            ap_phi_mux_nopen_flag_2_phi_fu_461_p4 <= "X";
        end if; 
    end process;


    ap_phi_mux_nopen_new_2_phi_fu_471_p4_assign_proc : process(ap_CS_fsm_state1, sync_read_read_fu_222_p2, nopen_new_1_fu_1421_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
            if ((ap_const_lv1_0 = sync_read_read_fu_222_p2)) then 
                ap_phi_mux_nopen_new_2_phi_fu_471_p4 <= nopen_new_1_fu_1421_p3;
            elsif ((ap_const_lv1_1 = sync_read_read_fu_222_p2)) then 
                ap_phi_mux_nopen_new_2_phi_fu_471_p4 <= ap_const_lv32_0;
            else 
                ap_phi_mux_nopen_new_2_phi_fu_471_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            ap_phi_mux_nopen_new_2_phi_fu_471_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_phi_mux_storemerge_phi_fu_450_p4_assign_proc : process(tmp_12_fu_868_p2, ap_condition_141)
    begin
        if ((ap_condition_141 = ap_const_boolean_1)) then
            if ((ap_const_lv1_0 = tmp_12_fu_868_p2)) then 
                ap_phi_mux_storemerge_phi_fu_450_p4 <= ap_const_lv1_0;
            elsif ((ap_const_lv1_1 = tmp_12_fu_868_p2)) then 
                ap_phi_mux_storemerge_phi_fu_450_p4 <= ap_const_lv1_1;
            else 
                ap_phi_mux_storemerge_phi_fu_450_p4 <= "X";
            end if;
        else 
            ap_phi_mux_storemerge_phi_fu_450_p4 <= "X";
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    dcount_fu_1097_p2 <= std_logic_vector(unsigned(count) - unsigned(count_last));
    grp_fu_478_p4 <= x0_V(21 downto 11);
    grp_fu_488_p4 <= x0_V(32 downto 22);
    grp_fu_498_p4 <= x0_V(43 downto 33);
    grp_fu_508_p4 <= x1_V(21 downto 11);
    grp_fu_518_p4 <= x1_V(32 downto 22);
    grp_fu_528_p4 <= x1_V(43 downto 33);
    grp_fu_538_p4 <= x2_V(21 downto 11);
    grp_fu_548_p4 <= x2_V(32 downto 22);
    grp_fu_558_p4 <= x2_V(43 downto 33);
    grp_fu_568_p4 <= x3_V(21 downto 11);
    grp_fu_578_p4 <= x3_V(32 downto 22);
    grp_fu_588_p4 <= x3_V(43 downto 33);
    grp_fu_598_p4 <= x4_V(21 downto 11);
    grp_fu_608_p4 <= x4_V(32 downto 22);
    grp_fu_618_p4 <= x4_V(43 downto 33);
    grp_fu_628_p4 <= x5_V(21 downto 11);
    grp_fu_638_p4 <= x5_V(32 downto 22);
    grp_fu_648_p4 <= x5_V(43 downto 33);
    grp_fu_658_p4 <= x6_V(21 downto 11);
    grp_fu_668_p4 <= x6_V(32 downto 22);
    grp_fu_678_p4 <= x6_V(43 downto 33);
    grp_fu_688_p4 <= x7_V(21 downto 11);
    grp_fu_698_p4 <= x7_V(32 downto 22);
    grp_fu_708_p4 <= x7_V(43 downto 33);
    grp_fu_718_p2 <= std_logic_vector(unsigned(count) + unsigned(ap_const_lv32_7));
    icmp_fu_1374_p2 <= "1" when (signed(tmp_88_fu_1364_p4) > signed(ap_const_lv24_0)) else "0";
    lskipped_load_load_fu_748_p1 <= lskipped;
    nopen_new_1_fu_1421_p3 <= 
        tmp_53_fu_1408_p2 when (tmp_89_fu_1386_p3(0) = '1') else 
        tmp_54_nopen_load_fu_1400_p3;
    p_Val2_15_fu_1148_p1 <= x0_V(11 - 1 downto 0);
    p_Val2_16_fu_1175_p1 <= x1_V(11 - 1 downto 0);
    p_Val2_17_fu_1202_p1 <= x2_V(11 - 1 downto 0);
    p_Val2_18_fu_1229_p1 <= x3_V(11 - 1 downto 0);
    p_Val2_19_fu_1256_p1 <= x4_V(11 - 1 downto 0);
    p_Val2_20_fu_1283_p1 <= x5_V(11 - 1 downto 0);
    p_Val2_21_fu_1310_p1 <= x6_V(11 - 1 downto 0);
    p_Val2_22_fu_1337_p1 <= x7_V(11 - 1 downto 0);
    p_Val2_23_fu_874_p1 <= x0_V(11 - 1 downto 0);
    p_Val2_24_fu_901_p1 <= x1_V(11 - 1 downto 0);
    p_Val2_25_fu_928_p1 <= x2_V(11 - 1 downto 0);
    p_Val2_26_fu_955_p1 <= x3_V(11 - 1 downto 0);
    p_Val2_27_fu_982_p1 <= x4_V(11 - 1 downto 0);
    p_Val2_28_fu_1009_p1 <= x5_V(11 - 1 downto 0);
    p_Val2_29_fu_1036_p1 <= x6_V(11 - 1 downto 0);
    p_Val2_30_fu_1063_p1 <= x7_V(11 - 1 downto 0);
    r_V_10_fu_977_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_59_fu_959_p8),64));
    r_V_11_fu_1004_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_62_fu_986_p8),64));
    r_V_12_fu_1031_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_65_fu_1013_p8),64));
    r_V_13_fu_1058_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_68_fu_1040_p8),64));
    r_V_14_fu_1085_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_71_fu_1067_p8),64));
    r_V_15_fu_950_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_56_fu_932_p8),64));
    r_V_1_fu_1197_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_24_fu_1179_p8),64));
    r_V_2_fu_896_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_46_fu_878_p8),64));
    r_V_3_fu_1224_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_27_fu_1206_p8),64));
    r_V_4_fu_1251_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_30_fu_1233_p8),64));
    r_V_5_fu_1278_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_33_fu_1260_p8),64));
    r_V_6_fu_1305_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_36_fu_1287_p8),64));
    r_V_7_fu_923_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_49_fu_905_p8),64));
    r_V_8_fu_1332_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_39_fu_1314_p8),64));
    r_V_9_fu_1359_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_42_fu_1341_p8),64));
    r_V_fu_1170_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_21_fu_1152_p8),64));
    sync_read_read_fu_222_p2 <= (0=>sync, others=>'-');
    tmp1_fu_806_p2 <= (ti2_V or ti1_V);
    tmp2_fu_820_p2 <= (ti7_V or ti0_V);
    tmp3_fu_1123_p8 <= ((((((tmp_18_fu_1117_p2 & ap_const_lv1_0) & tmp_9_cast_fu_1111_p2) & ap_const_lv1_0) & tmp_9_cast_fu_1111_p2) & ap_const_lv1_0) & tmp_9_cast_fu_1111_p2);
    tmp6_fu_792_p2 <= (tmp8_fu_774_p2 or tmp7_fu_760_p2);
    tmp7_fu_760_p2 <= (ti6_V or ti5_V);
    tmp8_fu_774_p2 <= (ti4_V or ti3_V);
    tmp9_fu_838_p2 <= (tmp2_fu_820_p2 or tmp1_fu_806_p2);
    tmp_10_fu_816_p1 <= ti0_V(1 - 1 downto 0);
    tmp_11_fu_832_p2 <= (tmp_9_fu_812_p1 or tmp_10_fu_816_p1);
    tmp_12_fu_868_p2 <= "1" when (nopen = ap_const_lv32_0) else "0";
    tmp_14_fu_844_p2 <= (tmp_5_fu_786_p2 or tmp_4_fu_780_p2);
    tmp_15_fu_850_p2 <= (tmp_s_fu_826_p2 or tmp_11_fu_832_p2);
    tmp_16_fu_1103_p1 <= dcount_fu_1097_p2(15 - 1 downto 0);
    tmp_17_fu_1107_p1 <= dcount_fu_1097_p2(16 - 1 downto 0);
    tmp_18_fu_1117_p2 <= std_logic_vector(unsigned(ap_const_lv16_7FFF) + unsigned(tmp_17_fu_1107_p1));
    tmp_1_fu_756_p1 <= ti5_V(1 - 1 downto 0);
    tmp_21_fu_1152_p8 <= ((((((grp_fu_498_p4 & ap_const_lv5_0) & grp_fu_488_p4) & ap_const_lv5_0) & grp_fu_478_p4) & ap_const_lv5_0) & p_Val2_15_fu_1148_p1);
    tmp_24_fu_1179_p8 <= ((((((grp_fu_528_p4 & ap_const_lv5_0) & grp_fu_518_p4) & ap_const_lv5_0) & grp_fu_508_p4) & ap_const_lv5_0) & p_Val2_16_fu_1175_p1);
    tmp_27_fu_1206_p8 <= ((((((grp_fu_558_p4 & ap_const_lv5_0) & grp_fu_548_p4) & ap_const_lv5_0) & grp_fu_538_p4) & ap_const_lv5_0) & p_Val2_17_fu_1202_p1);
    tmp_2_fu_766_p1 <= ti3_V(1 - 1 downto 0);
    tmp_30_fu_1233_p8 <= ((((((grp_fu_588_p4 & ap_const_lv5_0) & grp_fu_578_p4) & ap_const_lv5_0) & grp_fu_568_p4) & ap_const_lv5_0) & p_Val2_18_fu_1229_p1);
    tmp_33_fu_1260_p8 <= ((((((grp_fu_618_p4 & ap_const_lv5_0) & grp_fu_608_p4) & ap_const_lv5_0) & grp_fu_598_p4) & ap_const_lv5_0) & p_Val2_19_fu_1256_p1);
    tmp_36_fu_1287_p8 <= ((((((grp_fu_648_p4 & ap_const_lv5_0) & grp_fu_638_p4) & ap_const_lv5_0) & grp_fu_628_p4) & ap_const_lv5_0) & p_Val2_20_fu_1283_p1);
    tmp_39_fu_1314_p8 <= ((((((grp_fu_678_p4 & ap_const_lv5_0) & grp_fu_668_p4) & ap_const_lv5_0) & grp_fu_658_p4) & ap_const_lv5_0) & p_Val2_21_fu_1310_p1);
    tmp_3_fu_770_p1 <= ti4_V(1 - 1 downto 0);
    tmp_42_fu_1341_p8 <= ((((((grp_fu_708_p4 & ap_const_lv5_0) & grp_fu_698_p4) & ap_const_lv5_0) & grp_fu_688_p4) & ap_const_lv5_0) & p_Val2_22_fu_1337_p1);
    tmp_46_fu_878_p8 <= ((((((grp_fu_498_p4 & ap_const_lv5_0) & grp_fu_488_p4) & ap_const_lv5_0) & grp_fu_478_p4) & ap_const_lv5_0) & p_Val2_23_fu_874_p1);
    tmp_49_fu_905_p8 <= ((((((grp_fu_528_p4 & ap_const_lv5_0) & grp_fu_518_p4) & ap_const_lv5_0) & grp_fu_508_p4) & ap_const_lv5_0) & p_Val2_24_fu_901_p1);
    tmp_4_fu_780_p2 <= (tmp_fu_752_p1 or tmp_1_fu_756_p1);
    tmp_52_fu_1394_p2 <= std_logic_vector(unsigned(nopen) + unsigned(ap_const_lv32_1));
    tmp_53_fu_1408_p2 <= std_logic_vector(unsigned(tmp_54_nopen_load_fu_1400_p3) + unsigned(ap_const_lv32_FFFFFFFF));
    tmp_54_fu_1414_p2 <= "0" when (tmp_6_fu_856_p2 = ap_const_lv2_0) else "1";
    tmp_54_nopen_load_fu_1400_p3 <= 
        tmp_52_fu_1394_p2 when (tmp_6_cast_fu_862_p2(0) = '1') else 
        nopen;
    tmp_55_fu_1430_p2 <= std_logic_vector(unsigned(count) + unsigned(ap_const_lv32_8));
    tmp_56_fu_932_p8 <= ((((((grp_fu_558_p4 & ap_const_lv5_0) & grp_fu_548_p4) & ap_const_lv5_0) & grp_fu_538_p4) & ap_const_lv5_0) & p_Val2_25_fu_928_p1);
    tmp_59_fu_959_p8 <= ((((((grp_fu_588_p4 & ap_const_lv5_0) & grp_fu_578_p4) & ap_const_lv5_0) & grp_fu_568_p4) & ap_const_lv5_0) & p_Val2_26_fu_955_p1);
    tmp_5_fu_786_p2 <= (tmp_3_fu_770_p1 or tmp_2_fu_766_p1);
    tmp_62_fu_986_p8 <= ((((((grp_fu_618_p4 & ap_const_lv5_0) & grp_fu_608_p4) & ap_const_lv5_0) & grp_fu_598_p4) & ap_const_lv5_0) & p_Val2_27_fu_982_p1);
    tmp_65_fu_1013_p8 <= ((((((grp_fu_648_p4 & ap_const_lv5_0) & grp_fu_638_p4) & ap_const_lv5_0) & grp_fu_628_p4) & ap_const_lv5_0) & p_Val2_28_fu_1009_p1);
    tmp_68_fu_1040_p8 <= ((((((grp_fu_678_p4 & ap_const_lv5_0) & grp_fu_668_p4) & ap_const_lv5_0) & grp_fu_658_p4) & ap_const_lv5_0) & p_Val2_29_fu_1036_p1);
    tmp_6_cast_fu_862_p2 <= (tmp_15_fu_850_p2 or tmp_14_fu_844_p2);
    tmp_6_fu_856_p2 <= (tmp9_fu_838_p2 or tmp6_fu_792_p2);
    tmp_71_fu_1067_p8 <= ((((((grp_fu_708_p4 & ap_const_lv5_0) & grp_fu_698_p4) & ap_const_lv5_0) & grp_fu_688_p4) & ap_const_lv5_0) & p_Val2_30_fu_1063_p1);
    tmp_7_fu_798_p1 <= ti2_V(1 - 1 downto 0);
    tmp_88_fu_1364_p4 <= dcount_fu_1097_p2(31 downto 8);
    tmp_89_fu_1386_p3 <= tmp_6_fu_856_p2(1 downto 1);
    tmp_8_fu_802_p1 <= ti1_V(1 - 1 downto 0);
    tmp_9_cast_fu_1111_p2 <= std_logic_vector(signed(ap_const_lv15_7FFF) + signed(tmp_16_fu_1103_p1));
    tmp_9_fu_812_p1 <= ti7_V(1 - 1 downto 0);
    tmp_fu_752_p1 <= ti6_V(1 - 1 downto 0);
    tmp_s_fu_826_p2 <= (tmp_8_fu_802_p1 or tmp_7_fu_798_p1);

    to0_V_assign_proc : process(ti0_V, ap_CS_fsm_state1, sync_read_read_fu_222_p2, lskipped_load_load_fu_748_p1)
    begin
        if ((((ap_const_lv1_1 = lskipped_load_load_fu_748_p1) and (ap_const_lv1_0 = sync_read_read_fu_222_p2) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_lv1_1 = sync_read_read_fu_222_p2) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            to0_V <= ap_const_lv2_0;
        elsif (((ap_const_lv1_0 = lskipped_load_load_fu_748_p1) and (ap_const_lv1_0 = sync_read_read_fu_222_p2) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            to0_V <= ti0_V;
        else 
            to0_V <= "XX";
        end if; 
    end process;


    to1_V_assign_proc : process(ti0_V, ti1_V, ap_CS_fsm_state1, sync_read_read_fu_222_p2, lskipped_load_load_fu_748_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
            if ((ap_const_lv1_1 = sync_read_read_fu_222_p2)) then 
                to1_V <= ap_const_lv2_0;
            elsif (((ap_const_lv1_1 = lskipped_load_load_fu_748_p1) and (ap_const_lv1_0 = sync_read_read_fu_222_p2))) then 
                to1_V <= ti0_V;
            elsif (((ap_const_lv1_0 = lskipped_load_load_fu_748_p1) and (ap_const_lv1_0 = sync_read_read_fu_222_p2))) then 
                to1_V <= ti1_V;
            else 
                to1_V <= "XX";
            end if;
        else 
            to1_V <= "XX";
        end if; 
    end process;


    to2_V_assign_proc : process(ti1_V, ti2_V, ap_CS_fsm_state1, sync_read_read_fu_222_p2, lskipped_load_load_fu_748_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
            if ((ap_const_lv1_1 = sync_read_read_fu_222_p2)) then 
                to2_V <= ap_const_lv2_0;
            elsif (((ap_const_lv1_1 = lskipped_load_load_fu_748_p1) and (ap_const_lv1_0 = sync_read_read_fu_222_p2))) then 
                to2_V <= ti1_V;
            elsif (((ap_const_lv1_0 = lskipped_load_load_fu_748_p1) and (ap_const_lv1_0 = sync_read_read_fu_222_p2))) then 
                to2_V <= ti2_V;
            else 
                to2_V <= "XX";
            end if;
        else 
            to2_V <= "XX";
        end if; 
    end process;


    to3_V_assign_proc : process(ti2_V, ti3_V, ap_CS_fsm_state1, sync_read_read_fu_222_p2, lskipped_load_load_fu_748_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
            if ((ap_const_lv1_1 = sync_read_read_fu_222_p2)) then 
                to3_V <= ap_const_lv2_0;
            elsif (((ap_const_lv1_1 = lskipped_load_load_fu_748_p1) and (ap_const_lv1_0 = sync_read_read_fu_222_p2))) then 
                to3_V <= ti2_V;
            elsif (((ap_const_lv1_0 = lskipped_load_load_fu_748_p1) and (ap_const_lv1_0 = sync_read_read_fu_222_p2))) then 
                to3_V <= ti3_V;
            else 
                to3_V <= "XX";
            end if;
        else 
            to3_V <= "XX";
        end if; 
    end process;


    to4_V_assign_proc : process(ti3_V, ti4_V, ap_CS_fsm_state1, sync_read_read_fu_222_p2, lskipped_load_load_fu_748_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
            if ((ap_const_lv1_1 = sync_read_read_fu_222_p2)) then 
                to4_V <= ap_const_lv2_0;
            elsif (((ap_const_lv1_1 = lskipped_load_load_fu_748_p1) and (ap_const_lv1_0 = sync_read_read_fu_222_p2))) then 
                to4_V <= ti3_V;
            elsif (((ap_const_lv1_0 = lskipped_load_load_fu_748_p1) and (ap_const_lv1_0 = sync_read_read_fu_222_p2))) then 
                to4_V <= ti4_V;
            else 
                to4_V <= "XX";
            end if;
        else 
            to4_V <= "XX";
        end if; 
    end process;


    to5_V_assign_proc : process(ti4_V, ti5_V, ap_CS_fsm_state1, sync_read_read_fu_222_p2, lskipped_load_load_fu_748_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
            if ((ap_const_lv1_1 = sync_read_read_fu_222_p2)) then 
                to5_V <= ap_const_lv2_0;
            elsif (((ap_const_lv1_1 = lskipped_load_load_fu_748_p1) and (ap_const_lv1_0 = sync_read_read_fu_222_p2))) then 
                to5_V <= ti4_V;
            elsif (((ap_const_lv1_0 = lskipped_load_load_fu_748_p1) and (ap_const_lv1_0 = sync_read_read_fu_222_p2))) then 
                to5_V <= ti5_V;
            else 
                to5_V <= "XX";
            end if;
        else 
            to5_V <= "XX";
        end if; 
    end process;


    to6_V_assign_proc : process(ti5_V, ti6_V, ap_CS_fsm_state1, sync_read_read_fu_222_p2, lskipped_load_load_fu_748_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
            if ((ap_const_lv1_1 = sync_read_read_fu_222_p2)) then 
                to6_V <= ap_const_lv2_0;
            elsif (((ap_const_lv1_1 = lskipped_load_load_fu_748_p1) and (ap_const_lv1_0 = sync_read_read_fu_222_p2))) then 
                to6_V <= ti5_V;
            elsif (((ap_const_lv1_0 = lskipped_load_load_fu_748_p1) and (ap_const_lv1_0 = sync_read_read_fu_222_p2))) then 
                to6_V <= ti6_V;
            else 
                to6_V <= "XX";
            end if;
        else 
            to6_V <= "XX";
        end if; 
    end process;


    to7_V_assign_proc : process(ti6_V, ti7_V, ap_CS_fsm_state1, sync_read_read_fu_222_p2, lskipped_load_load_fu_748_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
            if ((ap_const_lv1_1 = sync_read_read_fu_222_p2)) then 
                to7_V <= ap_const_lv2_0;
            elsif (((ap_const_lv1_1 = lskipped_load_load_fu_748_p1) and (ap_const_lv1_0 = sync_read_read_fu_222_p2))) then 
                to7_V <= ti6_V;
            elsif (((ap_const_lv1_0 = lskipped_load_load_fu_748_p1) and (ap_const_lv1_0 = sync_read_read_fu_222_p2))) then 
                to7_V <= ti7_V;
            else 
                to7_V <= "XX";
            end if;
        else 
            to7_V <= "XX";
        end if; 
    end process;


    to8_V_assign_proc : process(ti7_V, ap_CS_fsm_state1, sync_read_read_fu_222_p2, lskipped_load_load_fu_748_p1)
    begin
        if (((ap_const_lv1_1 = lskipped_load_load_fu_748_p1) and (ap_const_lv1_0 = sync_read_read_fu_222_p2) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            to8_V <= ti7_V;
        elsif ((((ap_const_lv1_0 = lskipped_load_load_fu_748_p1) and (ap_const_lv1_0 = sync_read_read_fu_222_p2) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_lv1_1 = sync_read_read_fu_222_p2) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            to8_V <= ap_const_lv2_0;
        else 
            to8_V <= "XX";
        end if; 
    end process;

    v_assign_fu_1141_p2 <= (tmp3_fu_1123_p8 or ap_const_lv64_8000800080008000);

    y0_V_assign_proc : process(ap_CS_fsm_state1, sync_read_read_fu_222_p2, lskipped_load_load_fu_748_p1, r_V_2_fu_896_p1, v_assign_fu_1141_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
            if ((ap_const_lv1_1 = sync_read_read_fu_222_p2)) then 
                y0_V <= ap_const_lv64_0;
            elsif (((ap_const_lv1_1 = lskipped_load_load_fu_748_p1) and (ap_const_lv1_0 = sync_read_read_fu_222_p2))) then 
                y0_V <= v_assign_fu_1141_p2;
            elsif (((ap_const_lv1_0 = lskipped_load_load_fu_748_p1) and (ap_const_lv1_0 = sync_read_read_fu_222_p2))) then 
                y0_V <= r_V_2_fu_896_p1;
            else 
                y0_V <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            y0_V <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    y1_V_assign_proc : process(ap_CS_fsm_state1, sync_read_read_fu_222_p2, lskipped_load_load_fu_748_p1, r_V_7_fu_923_p1, r_V_fu_1170_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
            if ((ap_const_lv1_1 = sync_read_read_fu_222_p2)) then 
                y1_V <= ap_const_lv64_0;
            elsif (((ap_const_lv1_1 = lskipped_load_load_fu_748_p1) and (ap_const_lv1_0 = sync_read_read_fu_222_p2))) then 
                y1_V <= r_V_fu_1170_p1;
            elsif (((ap_const_lv1_0 = lskipped_load_load_fu_748_p1) and (ap_const_lv1_0 = sync_read_read_fu_222_p2))) then 
                y1_V <= r_V_7_fu_923_p1;
            else 
                y1_V <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            y1_V <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    y2_V_assign_proc : process(ap_CS_fsm_state1, sync_read_read_fu_222_p2, lskipped_load_load_fu_748_p1, r_V_15_fu_950_p1, r_V_1_fu_1197_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
            if ((ap_const_lv1_1 = sync_read_read_fu_222_p2)) then 
                y2_V <= ap_const_lv64_0;
            elsif (((ap_const_lv1_1 = lskipped_load_load_fu_748_p1) and (ap_const_lv1_0 = sync_read_read_fu_222_p2))) then 
                y2_V <= r_V_1_fu_1197_p1;
            elsif (((ap_const_lv1_0 = lskipped_load_load_fu_748_p1) and (ap_const_lv1_0 = sync_read_read_fu_222_p2))) then 
                y2_V <= r_V_15_fu_950_p1;
            else 
                y2_V <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            y2_V <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    y3_V_assign_proc : process(ap_CS_fsm_state1, sync_read_read_fu_222_p2, lskipped_load_load_fu_748_p1, r_V_10_fu_977_p1, r_V_3_fu_1224_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
            if ((ap_const_lv1_1 = sync_read_read_fu_222_p2)) then 
                y3_V <= ap_const_lv64_0;
            elsif (((ap_const_lv1_1 = lskipped_load_load_fu_748_p1) and (ap_const_lv1_0 = sync_read_read_fu_222_p2))) then 
                y3_V <= r_V_3_fu_1224_p1;
            elsif (((ap_const_lv1_0 = lskipped_load_load_fu_748_p1) and (ap_const_lv1_0 = sync_read_read_fu_222_p2))) then 
                y3_V <= r_V_10_fu_977_p1;
            else 
                y3_V <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            y3_V <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    y4_V_assign_proc : process(ap_CS_fsm_state1, sync_read_read_fu_222_p2, lskipped_load_load_fu_748_p1, r_V_11_fu_1004_p1, r_V_4_fu_1251_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
            if ((ap_const_lv1_1 = sync_read_read_fu_222_p2)) then 
                y4_V <= ap_const_lv64_0;
            elsif (((ap_const_lv1_1 = lskipped_load_load_fu_748_p1) and (ap_const_lv1_0 = sync_read_read_fu_222_p2))) then 
                y4_V <= r_V_4_fu_1251_p1;
            elsif (((ap_const_lv1_0 = lskipped_load_load_fu_748_p1) and (ap_const_lv1_0 = sync_read_read_fu_222_p2))) then 
                y4_V <= r_V_11_fu_1004_p1;
            else 
                y4_V <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            y4_V <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    y5_V_assign_proc : process(ap_CS_fsm_state1, sync_read_read_fu_222_p2, lskipped_load_load_fu_748_p1, r_V_12_fu_1031_p1, r_V_5_fu_1278_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
            if ((ap_const_lv1_1 = sync_read_read_fu_222_p2)) then 
                y5_V <= ap_const_lv64_0;
            elsif (((ap_const_lv1_1 = lskipped_load_load_fu_748_p1) and (ap_const_lv1_0 = sync_read_read_fu_222_p2))) then 
                y5_V <= r_V_5_fu_1278_p1;
            elsif (((ap_const_lv1_0 = lskipped_load_load_fu_748_p1) and (ap_const_lv1_0 = sync_read_read_fu_222_p2))) then 
                y5_V <= r_V_12_fu_1031_p1;
            else 
                y5_V <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            y5_V <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    y6_V_assign_proc : process(ap_CS_fsm_state1, sync_read_read_fu_222_p2, lskipped_load_load_fu_748_p1, r_V_13_fu_1058_p1, r_V_6_fu_1305_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
            if ((ap_const_lv1_1 = sync_read_read_fu_222_p2)) then 
                y6_V <= ap_const_lv64_0;
            elsif (((ap_const_lv1_1 = lskipped_load_load_fu_748_p1) and (ap_const_lv1_0 = sync_read_read_fu_222_p2))) then 
                y6_V <= r_V_6_fu_1305_p1;
            elsif (((ap_const_lv1_0 = lskipped_load_load_fu_748_p1) and (ap_const_lv1_0 = sync_read_read_fu_222_p2))) then 
                y6_V <= r_V_13_fu_1058_p1;
            else 
                y6_V <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            y6_V <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    y7_V_assign_proc : process(ap_CS_fsm_state1, sync_read_read_fu_222_p2, lskipped_load_load_fu_748_p1, r_V_14_fu_1085_p1, r_V_8_fu_1332_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
            if ((ap_const_lv1_1 = sync_read_read_fu_222_p2)) then 
                y7_V <= ap_const_lv64_0;
            elsif (((ap_const_lv1_1 = lskipped_load_load_fu_748_p1) and (ap_const_lv1_0 = sync_read_read_fu_222_p2))) then 
                y7_V <= r_V_8_fu_1332_p1;
            elsif (((ap_const_lv1_0 = lskipped_load_load_fu_748_p1) and (ap_const_lv1_0 = sync_read_read_fu_222_p2))) then 
                y7_V <= r_V_14_fu_1085_p1;
            else 
                y7_V <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            y7_V <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    y8_V_assign_proc : process(ap_CS_fsm_state1, sync_read_read_fu_222_p2, lskipped_load_load_fu_748_p1, r_V_14_fu_1085_p1, r_V_9_fu_1359_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
            if ((ap_const_lv1_1 = sync_read_read_fu_222_p2)) then 
                y8_V <= ap_const_lv64_0;
            elsif (((ap_const_lv1_1 = lskipped_load_load_fu_748_p1) and (ap_const_lv1_0 = sync_read_read_fu_222_p2))) then 
                y8_V <= r_V_9_fu_1359_p1;
            elsif (((ap_const_lv1_0 = lskipped_load_load_fu_748_p1) and (ap_const_lv1_0 = sync_read_read_fu_222_p2))) then 
                y8_V <= r_V_14_fu_1085_p1;
            else 
                y8_V <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            y8_V <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    yv_V_assign_proc : process(ap_CS_fsm_state1, sync_read_read_fu_222_p2, lskipped_load_load_fu_748_p1, tmp_12_fu_868_p2, tmp_6_cast_fu_862_p2, icmp_fu_1374_p2)
    begin
        if (((ap_const_lv1_1 = lskipped_load_load_fu_748_p1) and (ap_const_lv1_1 = tmp_6_cast_fu_862_p2) and (ap_const_lv1_0 = sync_read_read_fu_222_p2) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            yv_V <= ap_const_lv4_9;
        elsif (((ap_const_lv1_1 = lskipped_load_load_fu_748_p1) and (ap_const_lv1_1 = icmp_fu_1374_p2) and (ap_const_lv1_0 = sync_read_read_fu_222_p2) and (ap_const_lv1_0 = tmp_6_cast_fu_862_p2) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            yv_V <= ap_const_lv4_1;
        elsif ((((ap_const_lv1_1 = lskipped_load_load_fu_748_p1) and (ap_const_lv1_0 = sync_read_read_fu_222_p2) and (ap_const_lv1_0 = icmp_fu_1374_p2) and (ap_const_lv1_0 = tmp_6_cast_fu_862_p2) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_lv1_1 = tmp_12_fu_868_p2) and (ap_const_lv1_0 = lskipped_load_load_fu_748_p1) and (ap_const_lv1_0 = sync_read_read_fu_222_p2) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_lv1_1 = sync_read_read_fu_222_p2) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            yv_V <= ap_const_lv4_0;
        elsif (((ap_const_lv1_0 = lskipped_load_load_fu_748_p1) and (ap_const_lv1_0 = sync_read_read_fu_222_p2) and (ap_const_lv1_0 = tmp_12_fu_868_p2) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            yv_V <= ap_const_lv4_8;
        else 
            yv_V <= "XXXX";
        end if; 
    end process;

end behav;
